;
; SKI MADNESS
;
; A simple SKI game for JG40
; by DGM
;
; How-to-Play:
;  You are the little pixel at bottom of the screen. Use button 1 to move left
;  and button 4 to move right. Do not get hit by the obstacles and once you have
;  "skied" around 512 movements, you win the game! (The minimum time to win the
;  game is stipulated to be around 51,2 seconds.) When you win or lose, press
;  button 2 or 3 to restart the game.
;

start:
; pseudo-random number generator seed at RAM 0
    sed $0
    or 8
    sta
; player position at RAM 1
    sed $1
    and 0
    or 8
    sta
; save 1 in RAM 2 to additions 
    sed $2
    and 0
    or 1
    sta
; save 15 in RAM 4 to loop
    sed $4
    or 15
    sta
; RAM at 5, 6 and 7 will be the player score
    and 0
    sed $5
    sta
    sed $6
    sta
    sed $7
    or 2
    sta
; RAM at 8 will be used as auxiliary
    and 0
    sed $8
    sta

; stop current music, if any
    sed $F
    and 0
    or $D
    sta
  
; draw the title screen 
    ses title_screen
    and 0
    or $3
    sta 
; set accumulator to 15
    or 15
    pua
; do a 16 iterations loop
loop_title:
    sed $F
    trr
    trr
    trr
    trr
    poa
    sed $2
    add   ; adds 1
    pua
    not   ; negate
    sed $4
    add   ; adds 15
    jc loop_title
    poa
  
; wait for a button press
    sed $F
check_again:
    or $F
    sta
    lda
    jz check_again
  
; clear the screen
    sed $F
    and 0
    or $5
    sta

; program the tone which will be played during the game
    and 0
    or $A
    sta
    or 15 
    sta
    ses MusicGamePlay
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr

; start of the main game loop
loop:

; if RAM in 8 is zero, skip calculating random number
    sed $8
    lda
    jz skip1

; play the "music"
    sed $F
    and 0
    or $B
    sta

; calculate a pseudo-random number
; TODO: use a "table" to variate? nah :)
    sed $0
    lda
    add
    not
    shl
    add
    not
; save to RAM 0 and push to stack
    sta
    pua 

skip1:
; scroll the screen bottom-to-top
    sed $F  
    and 0
    or $6
    sta
    and 0
    or $8
    sta

; check if the player "collided" with some obstacle
    and 0
    or $2
    sta
    sed $1
    lda
    sed $F
    sta
    or 15
    sta
    lda
    jz did_not_collide
; collided? game over
    and 0
    jz game_over
  
did_not_collide:

; if RAM in 8 is 0, skip drawing the random obstacle
    sed $8
    lda
    jz skip2

; put a "random" obstacle at the top
    sed $F
    and 0
    or 1
    sta
    poa    ; pop the obstacle x-position
    sta
    and 0  ; obstacle y-position
    sta

skip2:
; negate the value in RAM 8
    sed $8
    lda
    not
    sta

; display the player
    sed $F
    and 0
    or 1
    sta
    sed $1  ; player X-position
    lda
    sed $F
    sta
    or 15   ; player y-position
    sta

; wait for a vsync
    and 0
    or $4
    sta

; movement of the player
; get buttons state
    sed $F
    or $F
    sta
    lda
; check button 1
    pua
    shl
    jc button1pressed
; check button 4
    poa
    shr
    jc button4pressed

; jump back to loop
    and 0
    jz loop

; decrement player x positition
button1pressed:
    poa
    sed $1
    lda
    sed $2
    not 
    add
; turned to zero?
    jz resetto0
    not
    sed $1
    sta
    and 0
    jz increment_score
  
; increment player x positition
button4pressed:
    sed $1
    lda
    sed $2
    add
; turned to zero?
    jz resetto15
    sed $1
    sta
    and 0
    jz increment_score
  
resetto15:
    or 15
    sed $1
    sta
    and 0
    jz loop
  
resetto0:
    and 0
    sed $1
    sta
    jz loop

; increment the player score
increment_score:
    sed $5
    lda
    sed $2
    add
    sed $5
    sta
    jc increment_score2  
    and 0
    jz loop
increment_score2:
    sed $6
    lda
    sed $2
    add
    sed $6
    sta
    jc increment_score3
    and 0
    jz loop
increment_score3:
    sed $7
    lda
    sed $2
    not
    add
    not
    sed $7
    sta
; once you have done 512 movements, you win the game! :)
    jz you_win_the_game
    and 0
    jz loop

; you lose the game
game_over:
; stop current music
    sed $F
    and 0
    or $D
    sta
; program the "game over" music
    sed $F
    and 0
    or $A
    sta
    and 0
    or 11 
    sta
    ses MusicGameOver
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
; draw the "game over" screen 
    sed $F
    ses gameover_screen
    and 0
    or $3
    sta 
; set accumulator to 15
    or 15
    pua
; do a 16 iterations loop
loop_gameover:
    sed $F
    trr
    trr
    trr
    trr
    poa
    sed $2
    add   ; adds 1
    pua
    not   ; negate
    sed $4
    add   ; adds 15
    jc loop_gameover
    poa
    and 0
    jz go_flash
  
; you win the game
you_win_the_game:
; stop current music
    sed $F
    and 0
    or $D
    sta
; program the "you win" music
    sed $F
    and 0
    or $A
    sta
    and 0
    or 12 
    sta
    ses MusicYouWin
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
    trr
; draw the "you win" screen 
    sed $F
    ses youwin_screen
    and 0
    or $3
    sta 
; set accumulator to 15
    or 15
    pua
; do a 16 iterations loop
loop_youwin:
    sed $F
    trr
    trr
    trr
    trr
    poa
    sed $2
    add   ; adds 1
    pua
    not   ; negate
    sed $4
    add   ; adds 15
    jc loop_youwin
    poa
    and 0
    jz go_flash
  
; flash the screen
go_flash:
; wait for a vsync
    sed $F
    and 0
    or $4
    sta
    sta
    sta
; negate the screen
    and 0
    or $7
    sta
; play the "music"
    sed $F
    and 0
    or $B
    sta
; check the buttons
    or $F
    sta
    lda
; if button 2 or 3 are pressed, reset the game
    shr
    shr
    jc go_start
    shr
    jc go_start
    and 0
    jz go_flash
go_start:
; wait for 5 vsyncs before reset  
    and 0
    or $4
    sta
    sta
    sta
    sta
    sta
    and 0
    jz start

; title screen
title_screen:
    db %00111101,%00101100
    db %00100001,%01001100
    db %00111101,%10001100
    db %00000101,%01001100
    db %00111101,%00101100
    db %00000000,%00000000
    db %01101101,%11011100
    db %01010101,%01010010
    db %01010101,%11010010
    db %01000101,%01011100
    db %00000000,%00000000
    db %01001011,%10110110
    db %01101010,%00100100
    db %01011011,%10110110
    db %01011010,%00010010
    db %01001011,%10110110

; "game over" screen
gameover_screen:
    db %00000000,%00000000
    db %11101110,%11011011
    db %10001010,%10101010
    db %10101110,%10101011
    db %10101010,%10101010
    db %11101010,%10001011
    db %00000000,%00000000
    db %10101111,%11110101
    db %10101111,%11110101
    db %00000000,%00000000
    db %11110101,%01110110
    db %10010101,%01000101
    db %10010101,%01110110
    db %10010101,%01000101
    db %11110010,%01110101
    db %00000000,%00000000

; "you win" screen
youwin_screen:
    db %00000000,%00000000
    db %01010011,%00100100
    db %01010100,%10100100
    db %01110100,%10100100
    db %00100100,%10100100
    db %00100100,%10100100
    db %01110011,%00011000
    db %00000000,%00000000
    db %10101010,%10101010
    db %00000000,%00000000
    db %01000101,%01000101
    db %01000101,%01100101
    db %01010101,%01010101
    db %01010101,%01001100
    db %01101101,%01000101
    db %00000000,%00000000
  
; "musics"
MusicGamePlay:
    dn 7,7,7,2,9,4,2,7,7,0,7,0,7,0,2,0
MusicGameOver:
    dn 9,8,6,5,3,2,3,2,5,3,2,2
MusicYouWin:
    dn 5,6,5,6,7,9,11,11,9,7,6,5,5

; EOF